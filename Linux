#include <iostream>
#include <unistd.h>
#include <vector>
#include <sys/wait.h>
#include <cstring>

bool is_prime(int n) {
    if (n < 2) return false;
    for (int i = 2; i * i <= n; ++i) {
        if (n % i == 0) return false;
    }
    return true;
}

void find_primes_in_range(int start, int end, int write_fd) {
    std::vector<int> primes;
    for (int i = start; i <= end; ++i) {
        if (is_prime(i)) {
            primes.push_back(i);
        }
    }
   
    for (int prime : primes) {
        write(write_fd, &prime, sizeof(prime));
    }
    int end_signal = -1; 
    write(write_fd, &end_signal, sizeof(end_signal));
    close(write_fd);
}

int main() {
    const int NUM_PROCESSES = 10;
    const int RANGE_SIZE = 1000;
    int start = 1;

  
    int pipes[NUM_PROCESSES][2];
    for (int i = 0; i < NUM_PROCESSES; ++i) {
        if (pipe(pipes[i]) == -1) {
            perror("Pipe creation failed");
            return 1;
        }
    }

    for (int i = 0; i < NUM_PROCESSES; ++i) {
        pid_t pid = fork();
        if (pid == -1) {
            perror("Fork failed");
            return 1;
        } else if (pid == 0) {
            
            close(pipes[i][0]); 
            int range_start = start + i * RANGE_SIZE;
            int range_end = range_start + RANGE_SIZE - 1;
            find_primes_in_range(range_start, range_end, pipes[i][1]);
            exit(0);
        } else {
            
            close(pipes[i][1]); 
        }
    }

   
    for (int i = 0; i < NUM_PROCESSES; ++i) {
        int prime;
        while (read(pipes[i][0], &prime, sizeof(prime)) > 0) {
            if (prime == -1) break; 
            std::cout << prime << " ";
        }
        close(pipes[i][0]); 
    }

 
    for (int i = 0; i < NUM_PROCESSES; ++i) {
        wait(nullptr);
    }

    std::cout << std::endl;
    return 0;
}
